import "./phaser.js";

// You can copy-and-paste the code from any of the examples at https://examples.phaser.io here.
// You will need to change the `parent` parameter passed to `new Phaser.Game()` from
// `phaser-example` to `game`, which is the id of the HTML element where we
// want the game to go.
// The assets (and code) can be found at: https://github.com/photonstorm/phaser3-examples
// You will need to change the paths you pass to `this.load.image()` or any other
// loading functions to reflect where you are putting the assets.
// All loading functions will typically all be found inside `preload()`.

// The simplest class example: https://phaser.io/examples/v3/view/scenes/scene-from-es6-class

class startScene extends Phaser.Scene{
    constructor(){
        super("bootGame");
    }
    preload(){
        this.load.image('button', 'assets/button.png');
    }
    create(){
          let button = this.physics.add.sprite(420,450, 'button');
          button.setInteractive();
          button.on('pointerdown', () => this.scene.start('PlayGame'));
          this.add.text(32,100, 'Click start to begin.', { fontSize: '28px', fill: '#fff' });
    }
}

let ball;
let target;
let music;
let walls;
let spaceKey;
let power=0;
let canShoot=false;
let centerPoint;

class playGame extends Phaser.Scene {
    constructor() {
        super("PlayGame");
    }
    
    preload() {
        this.load.image('ball','assets/ball.png');
        this.load.image('target','assets/target.png');
        this.load.audio('bgTrack', ['assets/BgTrack.mp3']);
        this.load.image('wall', 'assets/wall.png');
        this.load.html('nameform', 'assets/nameform.html');
    }
    
    create() {

        //controls
        spaceKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);

        //objects (ball, target)
        ball = this.physics.add.sprite(269,500, 'ball');
        ball.setVisible(true);
        ball.setBounce(1);
        ball.setInteractive(false);
        target = this.physics.add.sprite(420,100, 'target');
        //target.setBounce(1).setCollideWorldBounds(true);

        //walls     
        walls = this.physics.add.staticGroup();
        //  Here we create the ground.
        //  Scale it to fit the width of the game (the original sprite is 400x32 in size)
        walls.create(400, 568, 'wall').setScale(.4).refreshBody();
        walls.create(570, 369, 'wall').setScale(.4).refreshBody();
        walls.create(50, 220, 'wall').setScale(.4).refreshBody();
        walls.create(800, 220, 'wall').setScale(.4).refreshBody();
        walls.create(420, 200, 'wall').setScale(.4).refreshBody();
        walls.create(100, 400, 'wall').setScale(.4).refreshBody();
        walls.setVisible(true);
        //this.physics.add.collider(ball, walls);  

        //sounds
        music = this.sound.add('bgTrack',{volume:.1});
        music.loop = true;
        music.play();

        //misc
        let text = this.add.text(300, 10, 'Power level: 0', {fontSize: '20px ', fill: '#fff'});
        /*
        let textbox = this.add.dom(500, -100).createFromCache('nameform');
        textbox.setVisible(true);
        textbox.addListener('pointerdown');
        textbox.on('pointerdown', function (event) {
            if (textbox.target.name === 'playButton')
            {
                let inputText = this.getChildByName('nameField');

                //  Have they entered anything?
                if (inputText.value !== '')
                {
                    //  Turn off the click events
                    this.removeListener('click');

                    //  Hide the login element
                    this.setVisible(false);

                    ball.setInteractive(true);

                    canShoot = true;
                    
                    text.setText('Power Level: ' + inputText.value);
                    
                    power=inputText.value;

                }
                else{
                      //  Flash the prompt
                    this.scene.tweens.add({
                    targets: text,
                    alpha: 0.2,
                    duration: 250,
                    ease: 'Power3',
                    yoyo: true
                });
                }
            }

        });
        this.tweens.add({
            targets: textbox,
            y: 560,
            duration: 3000,
            ease: 'Power3'
        });
        */
    }
    
    update() {

        /*
        if(spaceKey.isDown && canShoot===true){
            ball.setVisible(true);
            ball.setInteractive(true);
            ball.body.drag.set(120);
            ball.setCollideWorldBounds(true);
            this.physics.moveTo(ball,this.input.mousePointer.x,this.input.mousePointer.y,power);
            canShoot=true;
         }*/

    }
}

let game;
    window.onload = function() {
        let gameConfig = {
            type: Phaser.AUTO,
            scale: {
                parent: "game",
                width: 800,
                height: 600
            },
            physics: {
                default: 'arcade',
                arcade: {
                    gravity: { y: 0 },
                }
            },    
            dom: {
                createContainer: true
            },
            scene: [startScene,playGame]
        }
        game = new Phaser.Game(gameConfig);
        window.focus();
}
    